AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Africa Tennis Platform - Serverless Backend

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: nodejs18.x
    # Attach the shared dependencies layer to every Lambda by default
    Layers:
      - !Ref CommonDependenciesLayer
    Environment:
      Variables:
        SUPABASE_URL: !Ref SupabaseUrl
        SUPABASE_SERVICE_ROLE_KEY: !Ref SupabaseServiceRoleKey
        SES_EMAIL_SOURCE: !Ref SesEmailSource
        FRONTEND_URL: !Ref FrontendUrl

Parameters:
  SupabaseUrl:
    Type: String
    Description: Supabase project URL
  
  SupabaseServiceRoleKey:
    Type: String
    Description: Supabase service role key
    NoEcho: true
  
  SesEmailSource:
    Type: String
    Description: Email address to send notifications from
    Default: info@africatennis.com
  
  FrontendUrl:
    Type: String
    Description: URL of the frontend application
    Default: www.africatennis.com

Resources:
  # -------------------------------------------------------
  # Shared layer with Supabase SDK, uuid and other utilities
  # -------------------------------------------------------
  CommonDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-dependencies
      Description: Shared node_modules for all Lambdas (supabase-js, uuid, etc.)
      ContentUri: layers/common-deps/
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Delete

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      Auth:
        DefaultAuthorizer: SupabaseJWTAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          SupabaseJWTAuthorizer:
            JwtConfiguration:
              Issuer: !Sub https://${SupabaseUrl}/auth/v1
              Audience:
                - authenticated
            IdentitySource: "$request.header.Authorization"

  # Core Heavy-Computation Functions
  
  # 1. Live Scoring Function
  UpdateScoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/update-score/
      Handler: index.handler
      Events:
        UpdateScore:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /compute/update-score/{matchId}
            Method: post
        UpdateScoreLegacy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /matches/{matchId}/score
            Method: post

  # 2. Tournament Bracket Generation Function  
  GenerateBracketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/generate-bracket/
      Handler: index.handler
      Events:
        GenerateBracket:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /compute/generate-bracket/{tournamentId}
            Method: post

  # 3. Stats Aggregation Function (API + Scheduled)
  AggregateStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/aggregate-stats/
      Handler: index.handler
      Timeout: 300
      MemorySize: 512
      Events:
        # API endpoint for manual aggregation
        ManualAggregation:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /compute/aggregate-stats
            Method: post
        # Scheduled aggregation every hour
        ScheduledAggregation:
          Type: Schedule
          Properties:
            Schedule: cron(0 * * * ? *)
            Name: HourlyStatsAggregation
            Description: Aggregates player statistics hourly
        # Daily comprehensive aggregation  
        DailyAggregation:
          Type: Schedule
          Properties:
            Schedule: cron(0 2 * * ? *)
            Name: DailyStatsAggregation
            Description: Daily comprehensive statistics aggregation at 2 AM UTC

  # Rankings API Function
  GetRankingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/get-rankings/
      Handler: index.handler
      Events:
        GetRankings:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /query/get-rankings
            Method: get

  # Supporting Functions
  
  SendNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/send-notification/
      Handler: index.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/new-match
            Method: post
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'

  GetMatchesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/get-matches/
      Handler: index.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /query/get-matches
            Method: get

  GenerateMatchSummaryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/generate-match-summary/
      Handler: index.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /compute/generate-match-summary/{matchId}
            Method: post
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: '*'

  GeneratePlayerStyleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/generate-player-style/
      Handler: index.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /compute/generate-player-style/{playerId}
            Method: post
            Auth:
              Authorizer: 'NONE'
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: '*'

  GetUmpireInsightFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/get-umpire-insight/
      Handler: index.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /compute/get-umpire-insight/{matchId}
            Method: post
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: '*'

  # Health check endpoint
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/health-check/
      Handler: index.handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /health
            Method: get

  # Video Processing Functions
  
  # S3 Bucket for video storage
  VideoStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-africa-tennis-videos"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Video Upload Processing Function
  ProcessVideoUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/process-video-upload/
      Handler: index.handler
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref VideoStorageBucket
      Events:
        ProcessVideoApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /video/process-upload
            Method: post
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref VideoStorageBucket
        - S3WritePolicy:
            BucketName: !Ref VideoStorageBucket

  # Tennis-Specific Video Analysis Function
  TennisVideoAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/tennis-video-analysis/
      Handler: index.handler
      Timeout: 600
      MemorySize: 2048
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref VideoStorageBucket
      Events:
        TennisAnalysisApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /video/tennis-analysis
            Method: post
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref VideoStorageBucket
        - S3WritePolicy:
            BucketName: !Ref VideoStorageBucket

  # Video-Based AI Coaching Function
  VideoBasedAICoachFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambdas/video-based-ai-coach/
      Handler: index.handler
      Timeout: 180
      MemorySize: 512
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref VideoStorageBucket
      Events:
        VideoCoachingApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /video/ai-coaching
            Method: post
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref VideoStorageBucket
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: "arn:aws:bedrock:*:*:model/anthropic.claude-3-sonnet-20240229-v1:0"

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/
    Export:
      Name: AfricaTennisApiEndpoint