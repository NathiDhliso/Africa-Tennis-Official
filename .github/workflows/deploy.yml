name: Deploy Africa Tennis Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22'
  AWS_REGION: 'us-west-2'

jobs:
  # Frontend Tests and Build
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Build frontend
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_AWS_ACCESS_KEY_ID: ${{ secrets.VITE_AWS_ACCESS_KEY_ID }}
          VITE_AWS_SECRET_ACCESS_KEY: ${{ secrets.VITE_AWS_SECRET_ACCESS_KEY }}
          VITE_AWS_REGION: ${{ env.AWS_REGION }}
          VITE_AWS_S3_BUCKET: ${{ secrets.VITE_AWS_S3_BUCKET }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/

  # Backend AWS Lambda Deployment
  backend-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: frontend-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Install backend dependencies
        working-directory: ./aws
        run: |
          npm ci
          # Install dependencies for each Lambda
          for dir in lambdas/*/; do
            if [ -f "$dir/package.json" ]; then
              echo "Installing dependencies for $dir"
              cd "$dir" && npm ci && cd ../..
            fi
          done

      - name: Build TypeScript
        working-directory: ./aws
        run: npm run build

      - name: SAM Build
        working-directory: ./aws
        run: sam build

      - name: SAM Deploy
        working-directory: ./aws
        run: |
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset \
            --parameter-overrides \
              SupabaseUrl="${{ secrets.VITE_SUPABASE_URL }}" \
              SupabaseServiceRoleKey="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
              SesEmailSource="${{ secrets.SES_EMAIL_SOURCE }}" \
              FrontendUrl="${{ secrets.FRONTEND_URL }}"

      - name: Get API Gateway URL
        working-directory: ./aws
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name africa-tennis-backend \
            --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" \
            --output text)
          echo "API_GATEWAY_URL=$API_URL" >> $GITHUB_ENV
          echo "üöÄ Backend deployed! API Gateway URL: $API_URL"

  # Cypress E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          build: npm run build
          start: npm run dev
          wait-on: 'http://localhost:5173'
          wait-on-timeout: 120
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  # Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-deploy]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Success Notification
        if: needs.backend-deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "Frontend: Deployed to Amplify"
          echo "Backend: Deployed to AWS Lambda"
          echo "API Gateway URL: ${{ env.API_GATEWAY_URL }}"

      - name: Deployment Failure Notification
        if: needs.backend-deploy.result == 'failure' || needs.frontend-test.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for more details."
          exit 1